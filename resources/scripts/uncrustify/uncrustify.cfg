# General.
##########
input_tab_size                  = 2
output_tab_size                 = 2
newlines                        = auto
utf8_bom                        = ignore

# Spaces.
#########

# Add or remove space around assignment operator '=', '+=', etc
sp_assign                       = force   # ignore/add/remove/force

# Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign
sp_cpp_lambda_assign            = remove   # ignore/add/remove/force

# Add or remove space after the capture specification in C++11 lambda.
sp_cpp_lambda_paren             = remove   # ignore/add/remove/force

# Add or remove space around assignment '=' in enum
sp_enum_assign                  = force   # ignore/add/remove/force

# Add or remove space around boolean operators '&&' and '||'
sp_bool                         = force   # ignore/add/remove/force

# Add or remove space around compare operator '<', '>', '==', etc
sp_compare                      = force   # ignore/add/remove/force


# Add or remove space before pointer star '*'
sp_before_ptr_star              = remove   # ignore/add/remove/force

# Add or remove space between pointer stars '*'
sp_between_ptr_star             = remove   # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a word.
sp_after_ptr_star               = force   # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a qualifier.
sp_after_ptr_star_qualifier     = force   # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by a func proto/def.
sp_after_ptr_star_func          = force   # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by an open paren (function types).
sp_ptr_star_paren               = force   # ignore/add/remove/force

# Add or remove space before a pointer star '*', if followed by a func proto/def.
sp_before_ptr_star_func         = remove   # ignore/add/remove/force

# Add or remove space before a reference sign '&'
sp_before_byref                 = remove   # ignore/add/remove/force

# Add or remove space before a reference sign '&' that isn't followed by a variable name
# If set to 'ignore', sp_before_byref is used instead.
sp_before_unnamed_byref         = remove   # ignore/add/remove/force

# Add or remove space after reference sign '&', if followed by a word.
sp_after_byref                  = force   # ignore/add/remove/force

# Add or remove space after a reference sign '&', if followed by a func proto/def.
sp_after_byref_func             = force   # ignore/add/remove/force

# Add or remove space before a reference sign '&', if followed by a func proto/def.
sp_before_byref_func            = remove   # ignore/add/remove/force




# Add or remove space in 'template <' vs 'template<'.
# If set to ignore, sp_before_angle is used.
sp_template_angle               = remove   # ignore/add/remove/force

# Add or remove space before '<>'
sp_before_angle                 = remove   # ignore/add/remove/force

# Add or remove space inside '<' and '>'
sp_inside_angle                 = remove   # ignore/add/remove/force

# Add or remove space after '<>'
sp_after_angle                  = remove   # ignore/add/remove/force

# Add or remove space between '<>' and '(' as found in 'new List<byte>(foo);'
sp_angle_paren                  = remove   # ignore/add/remove/force

# Add or remove space between '<>' and '()' as found in 'new List<byte>();'
sp_angle_paren_empty            = remove   # ignore/add/remove/force

# Add or remove space between '>' and '>' in '>>' (template stuff C++/C# only). Default=Add
sp_angle_shift                  = remove      # ignore/add/remove/force

# Permit removal of the space between '>>' in 'foo<bar<int> >' (C++11 only). Default=False
# sp_angle_shift cannot remove the space without this option.
sp_permit_cpp11_shift           = true    # false/true

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'
sp_after_cast                   = force   # ignore/add/remove/force

# Add or remove space between the type and open paren in a C++ cast, i.e. 'int(exp)' vs 'int (exp)'
sp_cpp_cast_paren               = remove   # ignore/add/remove/force

# Indents.
##########

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8. Default=8
indent_columns                  = 2        # unsigned number

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces (default)
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs                = 0        # number

# Whether to indent strings broken by '\' so that they line up
indent_align_string             = true    # false/true

# Whether the 'namespace' body is indented
indent_namespace                = true    # false/true

# Whether the 'class' body is indented
indent_class                    = true    # false/true

# Indent the code after an access specifier by one level.
# If set, this option forces 'indent_access_spec=0'
indent_access_spec_body         = true    # false/true


# Newlines.
###########

# Blank lines.
##############

